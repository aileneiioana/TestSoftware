
sw_hello_world.elf:     file format elf32-littlenios2
sw_hello_world.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001020

Program Header:
    LOAD off    0x00001000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00001020 paddr 0x00001020 align 2**12
         filesz 0x000004cc memsz 0x000004cc flags r-x
    LOAD off    0x000014ec vaddr 0x000014ec paddr 0x000014f0 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x000004f4 vaddr 0x000014f4 paddr 0x000014f4 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00001000  00001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00001020  00001020  000014f0  2**0
                  CONTENTS
  2 .text         0000049c  00001020  00001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000030  000014bc  000014bc  000014bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  000014ec  000014f0  000014ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  000014f4  000014f4  000014f4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00001504  00001504  000014f0  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  000014f0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000208  00000000  00000000  00001520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   00001266  00000000  00000000  00001728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00000a92  00000000  00000000  0000298e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00000ae6  00000000  00000000  00003420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00000278  00000000  00000000  00003f08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    000004f0  00000000  00000000  00004180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_alt_sim_info 00000040  00000000  00000000  00004670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000020  00000000  00000000  000046b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000009b  00000000  00000000  000046d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line_str 0000072e  00000000  00000000  0000476b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loclists 00000623  00000000  00000000  00004e99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .thread_model 00000003  00000000  00000000  00006422  2**0
                  CONTENTS, READONLY
 20 .cpu          0000000c  00000000  00000000  00006425  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  00006431  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  00006432  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  00006433  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0000643e  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  00006449  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000007  00000000  00000000  00006454  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000002f  00000000  00000000  0000645b  2**0
                  CONTENTS, READONLY
 28 .jdi          00004e27  00000000  00000000  0000648a  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00032187  00000000  00000000  0000b2b1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001000 l    d  .entry	00000000 .entry
00001020 l    d  .exceptions	00000000 .exceptions
00001020 l    d  .text	00000000 .text
000014bc l    d  .rodata	00000000 .rodata
000014ec l    d  .rwdata	00000000 .rwdata
000014f4 l    d  .bss	00000000 .bss
00001504 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    df *ABS*	00000000 crt0.o
00001058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00001140 g     F .text	0000002c alt_main
000014f0 g       *ABS*	00000000 __flash_rwdata_start
0000116c g     F .text	00000038 alt_putstr
00001294 g     F .text	00000008 altera_nios2_gen2_irq_init
00001000 g     F .entry	0000000c __reset
00001020 g       *ABS*	00000000 __flash_exceptions_start
000014fc g     O .bss	00000004 alt_argv
000094ec g       *ABS*	00000000 _gp
000011a4 g     F .text	00000004 usleep
0000129c g     F .text	00000028 memcpy
00001000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000013d4 g     F .text	00000064 .hidden __udivsi3
00001504 g       *ABS*	00000000 __bss_end
0000128c g     F .text	00000004 alt_dcache_flush_all
000014f0 g       *ABS*	00000000 __ram_rwdata_end
000014ec g       *ABS*	00000000 __ram_rodata_end
000014ec g     O .rwdata	00000004 jtag_uart_0
00001438 g     F .text	0000005c .hidden __umodsi3
00001504 g       *ABS*	00000000 end
00002000 g       *ABS*	00000000 __alt_stack_pointer
000011cc g     F .text	00000030 altera_avalon_jtag_uart_write
00001020 g     F .text	0000003c _start
000011c8 g     F .text	00000004 alt_sys_init
00001494 g     F .text	00000028 .hidden __mulsi3
000014ec g       *ABS*	00000000 __ram_rwdata_start
000014bc g       *ABS*	00000000 __ram_rodata_start
000011fc g     F .text	00000090 alt_busy_sleep
00001504 g       *ABS*	00000000 __alt_stack_base
000014f4 g       *ABS*	00000000 __bss_start
0000105c g     F .text	00000060 main
000014f8 g     O .bss	00000004 alt_envp
000012e0 g     F .text	00000080 .hidden __divsi3
000014bc g       *ABS*	00000000 __flash_rodata_start
000011a8 g     F .text	00000020 alt_irq_init
000014f4 g     O .bss	00000002 LED_value
00001500 g     O .bss	00000004 alt_argc
00001020 g       *ABS*	00000000 __ram_exceptions_start
000014f0 g       *ABS*	00000000 _edata
00001504 g       *ABS*	00000000 _end
00001020 g       *ABS*	00000000 __ram_exceptions_end
00001360 g     F .text	00000074 .hidden __modsi3
00002000 g       *ABS*	00000000 __alt_data_end
0000100c g       .entry	00000000 _exit
000012c4 g     F .text	0000001c strlen
00001290 g     F .text	00000004 alt_icache_flush_all
000010bc g     F .text	00000084 alt_load



Disassembly of section .entry:

00001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    1000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    1004:	08440814 	ori	at,at,4128
    jmp r1
    1008:	0800683a 	jmp	at

0000100c <_exit>:
	...

Disassembly of section .text:

00001020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    1020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    1024:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
    1028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    102c:	d6a53b14 	ori	gp,gp,38124
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    1030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    1034:	10853d14 	ori	r2,r2,5364

    movhi r3, %hi(__bss_end)
    1038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    103c:	18c54114 	ori	r3,r3,5380

    beq r2, r3, 1f
    1040:	10c00326 	beq	r2,r3,1050 <_start+0x30>

0:
    stw zero, (r2)
    1044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    1048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    104c:	10fffd36 	bltu	r2,r3,1044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    1050:	00010bc0 	call	10bc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    1054:	00011400 	call	1140 <alt_main>

00001058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    1058:	003fff06 	br	1058 <alt_after_alt_main>

0000105c <main>:

alt_u16 LED_value;


int main()
{
    105c:	defffc04 	addi	sp,sp,-16
  alt_putstr("Hello from Nios II!\n");
    1060:	01000034 	movhi	r4,0
{
    1064:	dc400115 	stw	r17,4(sp)
    1068:	dc000015 	stw	r16,0(sp)
  alt_putstr("Hello from Nios II!\n");
    106c:	21052f04 	addi	r4,r4,5308

  while(1)
  {
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE,0x01);
	usleep(5000);
	alt_putstr("Led ON!\n");
    1070:	04400034 	movhi	r17,0
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE,0x00);
    usleep(5000);
    alt_putstr("Led OFF!\n");
    1074:	04000034 	movhi	r16,0
{
    1078:	dc800215 	stw	r18,8(sp)
    107c:	dfc00315 	stw	ra,12(sp)
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE,0x01);
    1080:	04800044 	movi	r18,1
  alt_putstr("Hello from Nios II!\n");
    1084:	000116c0 	call	116c <alt_putstr>
	alt_putstr("Led ON!\n");
    1088:	8c453504 	addi	r17,r17,5332
    alt_putstr("Led OFF!\n");
    108c:	84053804 	addi	r16,r16,5344
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE,0x01);
    1090:	048c0035 	stwio	r18,12288(zero)
	usleep(5000);
    1094:	0104e204 	movi	r4,5000
    1098:	00011a40 	call	11a4 <usleep>
	alt_putstr("Led ON!\n");
    109c:	8809883a 	mov	r4,r17
    10a0:	000116c0 	call	116c <alt_putstr>
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE,0x00);
    10a4:	000c0035 	stwio	zero,12288(zero)
    usleep(5000);
    10a8:	0104e204 	movi	r4,5000
    10ac:	00011a40 	call	11a4 <usleep>
    alt_putstr("Led OFF!\n");
    10b0:	8009883a 	mov	r4,r16
    10b4:	000116c0 	call	116c <alt_putstr>
  while(1)
    10b8:	003ff506 	br	1090 <main+0x34>

000010bc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    10bc:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    10c0:	01000034 	movhi	r4,0
    10c4:	01400034 	movhi	r5,0
    10c8:	dfc00015 	stw	ra,0(sp)
    10cc:	21053b04 	addi	r4,r4,5356
    10d0:	29453c04 	addi	r5,r5,5360
    10d4:	21400426 	beq	r4,r5,10e8 <alt_load+0x2c>
  {
    while( to != end )
    {
      *to++ = *from++;
    10d8:	01800034 	movhi	r6,0
    10dc:	31853c04 	addi	r6,r6,5360
    10e0:	310dc83a 	sub	r6,r6,r4
    10e4:	000129c0 	call	129c <memcpy>
  if (to != from)
    10e8:	01000034 	movhi	r4,0
    10ec:	01400034 	movhi	r5,0
    10f0:	21040804 	addi	r4,r4,4128
    10f4:	29440804 	addi	r5,r5,4128
    10f8:	21400426 	beq	r4,r5,110c <alt_load+0x50>
      *to++ = *from++;
    10fc:	01800034 	movhi	r6,0
    1100:	31840804 	addi	r6,r6,4128
    1104:	310dc83a 	sub	r6,r6,r4
    1108:	000129c0 	call	129c <memcpy>
  if (to != from)
    110c:	01000034 	movhi	r4,0
    1110:	01400034 	movhi	r5,0
    1114:	21052f04 	addi	r4,r4,5308
    1118:	29452f04 	addi	r5,r5,5308
    111c:	21400426 	beq	r4,r5,1130 <alt_load+0x74>
      *to++ = *from++;
    1120:	01800034 	movhi	r6,0
    1124:	31853b04 	addi	r6,r6,5356
    1128:	310dc83a 	sub	r6,r6,r4
    112c:	000129c0 	call	129c <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    1130:	000128c0 	call	128c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    1134:	dfc00017 	ldw	ra,0(sp)
    1138:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
    113c:	00012901 	jmpi	1290 <alt_icache_flush_all>

00001140 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1140:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1144:	0009883a 	mov	r4,zero
{
    1148:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
    114c:	00011a80 	call	11a8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    1150:	00011c80 	call	11c8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1154:	d1a00317 	ldw	r6,-32756(gp)
    1158:	d1600417 	ldw	r5,-32752(gp)
    115c:	d1200517 	ldw	r4,-32748(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    1160:	dfc00017 	ldw	ra,0(sp)
    1164:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
    1168:	000105c1 	jmpi	105c <main>

0000116c <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    116c:	defffe04 	addi	sp,sp,-8
    1170:	dc000015 	stw	r16,0(sp)
    1174:	dfc00115 	stw	ra,4(sp)
    1178:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    117c:	00012c40 	call	12c4 <strlen>
    1180:	01000034 	movhi	r4,0
    1184:	000f883a 	mov	r7,zero
    1188:	100d883a 	mov	r6,r2
    118c:	800b883a 	mov	r5,r16
    1190:	21053b04 	addi	r4,r4,5356
#else
    return fputs(str, stdout);
#endif
#endif
}
    1194:	dfc00117 	ldw	ra,4(sp)
    1198:	dc000017 	ldw	r16,0(sp)
    119c:	dec00204 	addi	sp,sp,8
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    11a0:	00011cc1 	jmpi	11cc <altera_avalon_jtag_uart_write>

000011a4 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    11a4:	00011fc1 	jmpi	11fc <alt_busy_sleep>

000011a8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    11a8:	deffff04 	addi	sp,sp,-4
    11ac:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    11b0:	00012940 	call	1294 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    11b4:	00800044 	movi	r2,1
    11b8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    11bc:	dfc00017 	ldw	ra,0(sp)
    11c0:	dec00104 	addi	sp,sp,4
    11c4:	f800283a 	ret

000011c8 <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
}
    11c8:	f800283a 	ret

000011cc <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    11cc:	20c00017 	ldw	r3,0(r4)
{
    11d0:	3005883a 	mov	r2,r6

  const char * end = ptr + count;
    11d4:	2989883a 	add	r4,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    11d8:	01bfffd4 	movui	r6,65535
  while (ptr < end)
    11dc:	29000136 	bltu	r5,r4,11e4 <altera_avalon_jtag_uart_write+0x18>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    11e0:	f800283a 	ret
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    11e4:	19c00137 	ldwio	r7,4(r3)
    11e8:	31fffc2e 	bgeu	r6,r7,11dc <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    11ec:	29c00007 	ldb	r7,0(r5)
    11f0:	29400044 	addi	r5,r5,1
    11f4:	19c00035 	stwio	r7,0(r3)
    11f8:	003ff806 	br	11dc <altera_avalon_jtag_uart_write+0x10>

000011fc <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    11fc:	defffe04 	addi	sp,sp,-8
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    1200:	008666b4 	movhi	r2,6554
{
    1204:	dc000015 	stw	r16,0(sp)
    1208:	dfc00115 	stw	ra,4(sp)
  if (big_loops)
    120c:	10a66604 	addi	r2,r2,-26216
{
    1210:	2021883a 	mov	r16,r4
  if (big_loops)
    1214:	1100182e 	bgeu	r2,r4,1278 <alt_busy_sleep+0x7c>
  big_loops = us / (INT_MAX/
    1218:	014666b4 	movhi	r5,6554
    121c:	29666644 	addi	r5,r5,-26215
    1220:	00013d40 	call	13d4 <__udivsi3>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    1224:	00e00034 	movhi	r3,32768
  big_loops = us / (INT_MAX/
    1228:	1009883a 	mov	r4,r2
      __asm__ volatile (
    122c:	18ffffc4 	addi	r3,r3,-1
    for(i=0;i<big_loops;i++)
    1230:	0005883a 	mov	r2,zero
      __asm__ volatile (
    1234:	18ffffc4 	addi	r3,r3,-1
    1238:	183ffe1e 	bne	r3,zero,1234 <alt_busy_sleep+0x38>
    for(i=0;i<big_loops;i++)
    123c:	10800044 	addi	r2,r2,1
    1240:	113ffc16 	blt	r2,r4,1234 <alt_busy_sleep+0x38>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    1244:	017999b4 	movhi	r5,58982
    1248:	295999c4 	addi	r5,r5,26215
    124c:	00014940 	call	1494 <__mulsi3>
    1250:	1405883a 	add	r2,r2,r16
    1254:	100690ba 	slli	r3,r2,2
    1258:	1885883a 	add	r2,r3,r2
    __asm__ volatile (
    125c:	10bfffc4 	addi	r2,r2,-1
    1260:	103ffe1e 	bne	r2,zero,125c <alt_busy_sleep+0x60>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    1264:	0005883a 	mov	r2,zero
    1268:	dfc00117 	ldw	ra,4(sp)
    126c:	dc000017 	ldw	r16,0(sp)
    1270:	dec00204 	addi	sp,sp,8
    1274:	f800283a 	ret
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    1278:	200490ba 	slli	r2,r4,2
    127c:	1105883a 	add	r2,r2,r4
    __asm__ volatile (
    1280:	10bfffc4 	addi	r2,r2,-1
    1284:	00bffe16 	blt	zero,r2,1280 <alt_busy_sleep+0x84>
    1288:	003ff606 	br	1264 <alt_busy_sleep+0x68>

0000128c <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    128c:	f800283a 	ret

00001290 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    1290:	f800283a 	ret

00001294 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    1294:	000170fa 	wrctl	ienable,zero
}
    1298:	f800283a 	ret

0000129c <memcpy>:
    129c:	2005883a 	mov	r2,r4
    12a0:	0007883a 	mov	r3,zero
    12a4:	30c0011e 	bne	r6,r3,12ac <memcpy+0x10>
    12a8:	f800283a 	ret
    12ac:	28cf883a 	add	r7,r5,r3
    12b0:	39c00003 	ldbu	r7,0(r7)
    12b4:	10c9883a 	add	r4,r2,r3
    12b8:	18c00044 	addi	r3,r3,1
    12bc:	21c00005 	stb	r7,0(r4)
    12c0:	003ff806 	br	12a4 <memcpy+0x8>

000012c4 <strlen>:
    12c4:	2005883a 	mov	r2,r4
    12c8:	10c00007 	ldb	r3,0(r2)
    12cc:	1800021e 	bne	r3,zero,12d8 <strlen+0x14>
    12d0:	1105c83a 	sub	r2,r2,r4
    12d4:	f800283a 	ret
    12d8:	10800044 	addi	r2,r2,1
    12dc:	003ffa06 	br	12c8 <strlen+0x4>

000012e0 <__divsi3>:
    12e0:	20001a16 	blt	r4,zero,134c <__divsi3+0x6c>
    12e4:	000f883a 	mov	r7,zero
    12e8:	2800020e 	bge	r5,zero,12f4 <__divsi3+0x14>
    12ec:	014bc83a 	sub	r5,zero,r5
    12f0:	39c0005c 	xori	r7,r7,1
    12f4:	200d883a 	mov	r6,r4
    12f8:	00c00044 	movi	r3,1
    12fc:	2900092e 	bgeu	r5,r4,1324 <__divsi3+0x44>
    1300:	00800804 	movi	r2,32
    1304:	00c00044 	movi	r3,1
    1308:	00000106 	br	1310 <__divsi3+0x30>
    130c:	10001226 	beq	r2,zero,1358 <__divsi3+0x78>
    1310:	294b883a 	add	r5,r5,r5
    1314:	10bfffc4 	addi	r2,r2,-1
    1318:	18c7883a 	add	r3,r3,r3
    131c:	293ffb36 	bltu	r5,r4,130c <__divsi3+0x2c>
    1320:	18000d26 	beq	r3,zero,1358 <__divsi3+0x78>
    1324:	0005883a 	mov	r2,zero
    1328:	31400236 	bltu	r6,r5,1334 <__divsi3+0x54>
    132c:	314dc83a 	sub	r6,r6,r5
    1330:	10c4b03a 	or	r2,r2,r3
    1334:	1806d07a 	srli	r3,r3,1
    1338:	280ad07a 	srli	r5,r5,1
    133c:	183ffa1e 	bne	r3,zero,1328 <__divsi3+0x48>
    1340:	38000126 	beq	r7,zero,1348 <__divsi3+0x68>
    1344:	0085c83a 	sub	r2,zero,r2
    1348:	f800283a 	ret
    134c:	0109c83a 	sub	r4,zero,r4
    1350:	01c00044 	movi	r7,1
    1354:	003fe406 	br	12e8 <__divsi3+0x8>
    1358:	0005883a 	mov	r2,zero
    135c:	003ff806 	br	1340 <__divsi3+0x60>

00001360 <__modsi3>:
    1360:	20001716 	blt	r4,zero,13c0 <__modsi3+0x60>
    1364:	000f883a 	mov	r7,zero
    1368:	2005883a 	mov	r2,r4
    136c:	2800010e 	bge	r5,zero,1374 <__modsi3+0x14>
    1370:	014bc83a 	sub	r5,zero,r5
    1374:	00c00044 	movi	r3,1
    1378:	2900092e 	bgeu	r5,r4,13a0 <__modsi3+0x40>
    137c:	01800804 	movi	r6,32
    1380:	00c00044 	movi	r3,1
    1384:	00000106 	br	138c <__modsi3+0x2c>
    1388:	30001026 	beq	r6,zero,13cc <__modsi3+0x6c>
    138c:	294b883a 	add	r5,r5,r5
    1390:	31bfffc4 	addi	r6,r6,-1
    1394:	18c7883a 	add	r3,r3,r3
    1398:	293ffb36 	bltu	r5,r4,1388 <__modsi3+0x28>
    139c:	18000b26 	beq	r3,zero,13cc <__modsi3+0x6c>
    13a0:	1806d07a 	srli	r3,r3,1
    13a4:	11400136 	bltu	r2,r5,13ac <__modsi3+0x4c>
    13a8:	1145c83a 	sub	r2,r2,r5
    13ac:	280ad07a 	srli	r5,r5,1
    13b0:	183ffb1e 	bne	r3,zero,13a0 <__modsi3+0x40>
    13b4:	38000126 	beq	r7,zero,13bc <__modsi3+0x5c>
    13b8:	0085c83a 	sub	r2,zero,r2
    13bc:	f800283a 	ret
    13c0:	0109c83a 	sub	r4,zero,r4
    13c4:	01c00044 	movi	r7,1
    13c8:	003fe706 	br	1368 <__modsi3+0x8>
    13cc:	2005883a 	mov	r2,r4
    13d0:	003ff806 	br	13b4 <__modsi3+0x54>

000013d4 <__udivsi3>:
    13d4:	200d883a 	mov	r6,r4
    13d8:	2900152e 	bgeu	r5,r4,1430 <__udivsi3+0x5c>
    13dc:	28001416 	blt	r5,zero,1430 <__udivsi3+0x5c>
    13e0:	00800804 	movi	r2,32
    13e4:	00c00044 	movi	r3,1
    13e8:	00000206 	br	13f4 <__udivsi3+0x20>
    13ec:	10000e26 	beq	r2,zero,1428 <__udivsi3+0x54>
    13f0:	28000416 	blt	r5,zero,1404 <__udivsi3+0x30>
    13f4:	294b883a 	add	r5,r5,r5
    13f8:	10bfffc4 	addi	r2,r2,-1
    13fc:	18c7883a 	add	r3,r3,r3
    1400:	293ffa36 	bltu	r5,r4,13ec <__udivsi3+0x18>
    1404:	18000826 	beq	r3,zero,1428 <__udivsi3+0x54>
    1408:	0005883a 	mov	r2,zero
    140c:	31400236 	bltu	r6,r5,1418 <__udivsi3+0x44>
    1410:	314dc83a 	sub	r6,r6,r5
    1414:	10c4b03a 	or	r2,r2,r3
    1418:	1806d07a 	srli	r3,r3,1
    141c:	280ad07a 	srli	r5,r5,1
    1420:	183ffa1e 	bne	r3,zero,140c <__udivsi3+0x38>
    1424:	f800283a 	ret
    1428:	0005883a 	mov	r2,zero
    142c:	f800283a 	ret
    1430:	00c00044 	movi	r3,1
    1434:	003ff406 	br	1408 <__udivsi3+0x34>

00001438 <__umodsi3>:
    1438:	2005883a 	mov	r2,r4
    143c:	2900132e 	bgeu	r5,r4,148c <__umodsi3+0x54>
    1440:	28001216 	blt	r5,zero,148c <__umodsi3+0x54>
    1444:	01800804 	movi	r6,32
    1448:	00c00044 	movi	r3,1
    144c:	00000206 	br	1458 <__umodsi3+0x20>
    1450:	30000c26 	beq	r6,zero,1484 <__umodsi3+0x4c>
    1454:	28000416 	blt	r5,zero,1468 <__umodsi3+0x30>
    1458:	294b883a 	add	r5,r5,r5
    145c:	31bfffc4 	addi	r6,r6,-1
    1460:	18c7883a 	add	r3,r3,r3
    1464:	293ffa36 	bltu	r5,r4,1450 <__umodsi3+0x18>
    1468:	18000626 	beq	r3,zero,1484 <__umodsi3+0x4c>
    146c:	1806d07a 	srli	r3,r3,1
    1470:	11400136 	bltu	r2,r5,1478 <__umodsi3+0x40>
    1474:	1145c83a 	sub	r2,r2,r5
    1478:	280ad07a 	srli	r5,r5,1
    147c:	183ffb1e 	bne	r3,zero,146c <__umodsi3+0x34>
    1480:	f800283a 	ret
    1484:	2005883a 	mov	r2,r4
    1488:	f800283a 	ret
    148c:	00c00044 	movi	r3,1
    1490:	003ff606 	br	146c <__umodsi3+0x34>

00001494 <__mulsi3>:
    1494:	0005883a 	mov	r2,zero
    1498:	20000726 	beq	r4,zero,14b8 <__mulsi3+0x24>
    149c:	20c0004c 	andi	r3,r4,1
    14a0:	2008d07a 	srli	r4,r4,1
    14a4:	18000126 	beq	r3,zero,14ac <__mulsi3+0x18>
    14a8:	1145883a 	add	r2,r2,r5
    14ac:	294b883a 	add	r5,r5,r5
    14b0:	203ffa1e 	bne	r4,zero,149c <__mulsi3+0x8>
    14b4:	f800283a 	ret
    14b8:	f800283a 	ret
